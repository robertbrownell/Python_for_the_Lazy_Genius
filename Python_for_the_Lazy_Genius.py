#  ____            _    _                        __                    _    _
# |  _ \  _   _  _| |_ | |__    ___   _ __      / _)  ___   _ __     _| |_ | |__    ___
# | |_) )| | | |(_   _)| '_ \  / _ \ | '_ \    | |_  / _ \ | '__)   (_   _)| '_ \  / _ \
# |  __/ | |_| |  | |_ | | | |( (_) )| | | |   |  _)( (_) )| |        | |_ | | | |(  __/
# |_|     \__, |   \__)|_| |_| \___/ |_| |_|   |_|   \___/ |_|         \__)|_| |_| \___)
#         (___/
#            _                             ____               _
#           | |      __ _  ____ _   _     / ___)  ___  _ __  (_) _   _  ___
#           | |     / _` |(_  /| | | |   | |  _  / _ \| '_ \ | || | | |/ __)
#           | |___ ( (_| | / / | |_| |   | |_| |(  __/| | | || || |_| |\__ \
#           |_____) \__,_|/___) \__, |    \____| \___)|_| |_||_| \__,_|(___/
#                               (___/
#========================================================================================
'''
For many people studying Python, they have already studied other programming languages,
so they don't need to learn all the programming concepts over again, they already know them.
All they need is to see short examples of Python Code, and they'll figure out the rest.
Here is a set of short Python examples, very simple, so you can learn Python as quick as possible.
'''
# ===============================================================================================
#                       []=================================[]s
#                       ||  ____               _           ||
#                       || | __ )   __ _  ___ (_)  ___     ||
#                       || |  _ \  / _` |/ __)| | / __)    ||
#                       || | |_) )( (_| |\__ \| |( (__     ||
#                       || |____/  \__,_|(___/|_| \___)    ||
#                       ||                                 ||
#                       []=================================[]
# ===============================================================================================
#     Use   #     to comment out a line
'''
This is how you would
comment out several lines
'''
exit()     # this is how you exit/quit your Python program, I put it here so none of the code below will run.
print("Put two lines of Code ") ; print("Together.")   # put 2 lines of code together with   ;
for x in range(100): print(x)            # Range Function,    # prints every number until 100
for x in range(99, 0, -1):  print(x)     # Counts backwards
# ===============================================================================================
#           #-------------------------------------------------------#
#           |      ____         _         _    _                    |
#           |     |  _ \  _ __ (_) _ __  | |_ (_) _ __    __ _      |
#           |     | |_) || '__|| || '_ \ | __|| || '_ \  / _` |     |
#           |     |  __/ | |   | || | | || |_ | || | | || (_| |     |
#           |     |_|    |_|   |_||_| |_| \__||_||_| |_| \__, |     |
#           |                                            |___/      |
#           #-------------------------------------------------------#
# ===============================================================================================
print("Hello everyone.")                  # there is a carriage return after this line.
print("My Name is....", end="")           # No return at this line, Soft Echo, no \n return
print("Hallelujah")                       #>>>  My Name is...Hallelujah    #'' or "" pick one & stay consistent.
# ===============================================================================================
name = "Robert"                           # Using the  f''  for printing with Variables
relation = "Dad"                          # f'' or f""  feature makes the formatting easier
print(name + " is my " + relation +".")   #>>> Robert is my Dad.     # this is the ugly way
print(f'{name} is my {relation}.')        #>>> Robert is my Dad.     # this is the better way
# ===============================================================================================
print(min("robert"))        #>>>  b       # the minimum character
print(max("robert"))        #>>>  t       # the maximum character
print("robert".title())     #>>>  Robert
print("Robert".swapcase())  #>>>  rOBERT
print("Robert".upper())     #>>>  ROBERT
print("ROBERT".lower())     #>>>  robert
# ===============================================================================================
# ===============================================================================================
#  #-------------------------------------------------------------------------------------------#
#  |     __     __              _         _      _         _____                               |
#  |     \ \   / /  __ _  _ __ (_)  __ _ | |__  | |  ___  |_   _| _   _  _ __    ___  ___      |
#  |      \ \ / /  / _` || '__|| | / _` || '_ \ | | / _ \   | |  | | | || '_ \  / _ \/ __|     |
#  |       \ V /  | (_| || |   | || (_| || |_) || ||  __/   | |  | |_| || |_) ||  __/\__ \     |
#  |        \_/    \__,_||_|   |_| \__,_||_.__/ |_| \___|   |_|   \__, || .__/  \___||___/     |
#  |                                                              |___/ |_|                    |
#  #-------------------------------------------------------------------------------------------#
# ===============================================================================================
print(type("Hello"))            # >>> <class 'str'>
print(type(5))                  # >>> <class 'int'>
print(type(5.2))                # >>> <class 'float'>
print(type(["A", "B", "C"]))    # >>> <class 'list'>      # Lists use [], reference x[1]
print(type({"A", "B", "C"}))    # >>> <class 'set'>       # Set uses {}, no Dups
print(type(("1", "2", "3")))    # >>> <class 'tuple'>     # Tuples use (), needs a comma, Tuples can't be changed
print(type({"A": 1, "B": 2}))   # >>> <class 'dict'>      # Dict uses {x:y}, reference x['name']
print(type(True))               # >>> <class 'bool'>      # True or False
print(type(3.14j))              # >>> <class 'complex'>   # Ends with J
# ===============================================================================================
print(chr(77))        #>>> M       # Converts an integer to a character.
print(oct(100))       #>>> 0o144   # Converts an integer to an octal string.
print(ord("A"))       #>>> 65      # Converts a single character to its integer value.
print(eval("11*7"))   #>>> 77      # Evaluates a string and returns an object.
print(float(5))       #>>> 5.0     # Converts x to a floating-point number.
print(hex(10))        #>>> 0xa     # Converts an integer to a hexadecimal string.
print(str(100))       #>>> 100     # Converts object x to a string representation.
print(list("Robert")) #>>> ['R', 'o', 'b', 'e', 'r', 't']     # Converts s to a list.
# ===============================================================================================
print("ABab12".isalnum())  #>>> True
print("123456".isdigit())  #>>> True
print("ABCDEF".isupper())  #>>> True
print("abcdef".islower())  #>>> True
print("      ".isspace())  #>>> True
print("abcdef".upper())    #>>> ABCDEF
print("ABCDEF".lower())    #>>> abcedf
print("  hi  ".strip())    #>>> hi
print("Robert is tired".replace("tired","awake"))  #>>> Robert is awake
print("rOBERT".swapcase()) #>>> Robert
# ===============================================================================================
a=b=c=d=1               # Multi assignment allowed in Pythng
# ===============================================================================================
# Sets don't have Dups
print(" ".join(sorted(set('AABBBCCCCDDDDEEEEFFFFGGGGGHHHHIIIIJJJJKKKLLLMMMMNNNOOO'))))
# >>>   A B C D E F G H I J K L M N O
# ===============================================================================================
#Zip, and Dict to make a Dictionary
names=['Robert', 'Linda', 'David'] ; roles=['Father', 'Mother', 'Son']
print(dict(zip(names,roles)))    # ZIP puts to Sets together
#>>> {'Robert': 'Father', 'Linda': 'Mother', 'David': 'Son'}
# ===============================================================================================
money = {'Dad':4,'Mom':3,'Son':1}  #How much does Uncle Have, Error since Uncle is not defined, so use the GET Function
print("Uncle has " + str(money.get('Uncle', 0)) + " Dollars")    # this will default to 0, if Uncle doesn't exist
# ===============================================================================================
print(bool(.001))   # True
print(bool(''))     # False
print(bool(' '))    # True
# ===============================================================================================
# Sets,   Union,Intersection,Difference
USA_Spys = {"Bob", "Mary", "Fred"};    Russian_Spys = {"Gory", "Bogonko", "Fred"}
print("All the Spys are...", USA_Spys.union(Russian_Spys))
print("The Double Agents are...", USA_Spys.intersection(Russian_Spys))
print("The Trustworth angents are...", USA_Spys.difference(Russian_Spys))
# ===============================================================================================
myDict = {"Mom":"Linda", "Dad":"Robert"}      # Print just the Keys
print(myDict.keys())                          #>>> dict_keys(['Mom', 'Dad'])
# ===============================================================================================
del x,y,z      # Delete Variables, Python already does this, but you can force it to clean up
# ===============================================================================================
# ===============================================================================================
x=[1,2,3,4,5,3]     # INDEX in a list
print(x.index(3))   #>>> 2
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
#                     #------------------------------------#
#                     |      ____          _               |
#                     |     |  _ \   __ _ | |_   __ _      |
#                     |     | | | | / _` || __| / _` |     |
#                     |     | |_| || (_| || |_ | (_| |     |
#                     |     |____/  \__,_| \__| \__,_|     |
#                     |                                    |
#                     #------------------------------------#
# ===============================================================================================
a,b,_ = (1,2,3)  # notice the *_, which means the Rest, and _ ignore any warning of not using it.
print(f'{a} -------- {b}')    #>>>>> 1 -------- 2         # No Error that the Var _ was not used
a,b,*c=(1,2,3,4,5)  # notice the *, which means the Rest
print(f'{a} -------- {b}-------------{c}')      #>>>>> 1 -------- 2-------------[3, 4, 5]
a,b,*c,d=(1,2,3,4,5)  # notice the *, which means the Rest
print(f'{a} -------- {b}-------------{c}--------------{d}')   #>>>  1 -------- 2-------------[3, 4]--------------5
# ===============================================================================================
#        #---------------------------------------------------------------------------#
#        |      _____              _       __ ____   _          _                    |
#        |     |_   _|  ___ __  __| |_    / // ___| | |_  _ __ (_) _ __    __ _      |
#        |       | |   / _ \\ \/ /| __|  / / \___ \ | __|| '__|| || '_ \  / _` |     |
#        |       | |  |  __/ >  < | |_  / /   ___) || |_ | |   | || | | || (_| |     |
#        |       |_|   \___|/_/\_\ \__|/_/   |____/  \__||_|   |_||_| |_| \__, |     |
#        |                                                                |___/      |
#        #---------------------------------------------------------------------------#
# ===============================================================================================
print(len("ABCDEFGHIJKLMNOPQRSTUVWXYZ"))    #>>> 26    # Length of a string or Variable
# ===============================================================================================
x="a,b,c"                # Splitting Strings
print(x.split(','))      #>>> ['a', 'b', 'c']
# ===============================================================================================
print('robert'.capitalize())    # >>> Robert   #Capitalize a word, is text or variable
# ===============================================================================================
print("ABCDEF"[::-1])       #>>> FEDCBA      # Print Backwards
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
#                    #-------------------------------------#
#                    |      __  __         _    _          |
#                    |     |  \/  |  __ _ | |_ | |__       |
#                    |     | |\/| | / _` || __|| '_ \      |
#                    |     | |  | || (_| || |_ | | | |     |
#                    |     |_|  |_| \__,_| \__||_| |_|     |
#                    |                                     |
#                    #-------------------------------------#
# ===============================================================================================
num1= 100000000000000000000000000     # ugly format, I can't read, so you can format the number better
print(f'{num1:,}')                    #>>> 100,000,000,000,000,000,000,000,000
print(10_000_000_000 / 10_000)        #>>> 1000000.0       # more readable, doesn't change the value
# ===============================================================================================
print(5^2)         # this is 7 !!!
print(5**2)        # this is 25     #Square Root
print(10 % 4)      #>>> 2    10/4 remander
print(10//3)       #>>> 3    # 3 full times
# ===============================================================================================
print( 10 > 5)     #>>> True
print( 10 < 5)     #>>> False
print( 10 >= 10)   #>>> True
print( 10 <= 9)    #>>> False
# ===============================================================================================
for x in range(100):              # Show Numbers in other Formats
    print(f"#{x}     Hex:{hex(x)}       Oct:{oct(x)}       Binary:{bin(x)}")
# ===============================================================================================
#         #-------------------------------------------------------------------#
#         |      ____                             _      _                    |
#         |     | __ )  _ __   __ _  _ __    ___ | |__  (_) _ __    __ _      |
#         |     |  _ \ | '__| / _` || '_ \  / __|| '_ \ | || '_ \  / _` |     |
#         |     | |_) || |   | (_| || | | || (__ | | | || || | | || (_| |     |
#         |     |____/ |_|    \__,_||_| |_| \___||_| |_||_||_| |_| \__, |     |
#         |                                                        |___/      |
#         #-------------------------------------------------------------------#
# ===============================================================================================
print("Calc Works" if 5*5==25 else "Calc Broken")         # Single line IF Statement   #>>> Calc Works
# ===============================================================================================
if 10==5:
    print("Strange!")
elif 5 == 5:
    print("Should be True")
elif 5 == 7:
    print("Not Possible")
else:
    print("Neither were True")
# ===============================================================================================
count=0                                 # Simple While Statement
while count <= 100:
    count += 1 ; print(count)
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
#         #--------------------------------------------------------------------#
#         |      ___                                 _    _                    |
#         |     |_ _| _ __ ___   _ __    ___   _ __ | |_ (_) _ __    __ _      |
#         |      | | | '_ ` _ \ | '_ \  / _ \ | '__|| __|| || '_ \  / _` |     |
#         |      | | | | | | | || |_) || (_) || |   | |_ | || | | || (_| |     |
#         |     |___||_| |_| |_|| .__/  \___/ |_|    \__||_||_| |_| \__, |     |
#         |                     |_|                                 |___/      |
#         #--------------------------------------------------------------------#
# ===============================================================================================
import random                # See all the Functions of an Import
print(dir(random))           #>>> ['BPF', 'LOG4', 'NV_MAGICCONST'........]
print(help(random.randint))  # Detailed Help
# ===============================================================================
myFile="Junk.txt"
import os
os.rename(myFile)

from os import rename    # now I can use the rename() function without the need for os.rename()
rename(myFile)

from os import *      #bad practice to import *  because readers might not know where this rename() function came from
rename(myFile)

#bad practice to import *, because both these functions have an escape() function, so now it's confusing what escape() referes to.
from html import *
from glob import *     # glob.escape() overrides the html.escape() function

# how to handle this...
from html import escape as h_escape
from glob import escape as g_escape
# ===============================================================================================
if __name__ == "__main__":         # Test to see if this .PY file was imported or run directly
    print(f"You ran this Program directly! {__file__}")
else:
    print(f"You imported this file! File:{__file__}")
# ===============================================================================================
# ===============================================================================================
#                     #----------------------------------#
#                     |      _____  _  _                 |
#                     |     |  ___|(_)| |  ___  ___      |
#                     |     | |_   | || | / _ \/ __|     |
#                     |     |  _|  | || ||  __/\__ \     |
#                     |     |_|    |_||_| \___||___/     |
#                     |                                  |
#                     #----------------------------------#
# ===============================================================================================
from os import getcwd       # Current Directory
print(getcwd())             #>>>  c:\test\
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
#                #-------------------------------------------#
#                |      _                                    |
#                |     | |      ___    ___   _ __   ___      |
#                |     | |     / _ \  / _ \ | '_ \ / __|     |
#                |     | |___ | (_) || (_) || |_) |\__ \     |
#                |     |_____| \___/  \___/ | .__/ |___/     |
#                |                          |_|              |
#                #-------------------------------------------#
# ===============================================================================================
# Infinate While Loop, that needs a break
while True:
    if datetime.now()=="Thursday, 9, 2020":
        break
# ===============================================================================================
# For Loop
for i in [1, 2]:
    print(i)
for i in "Rob":
    print(i)
#>>>  1
#>>>  2
#>>>  R
#>>>  o
#>>>  b
# ===============================================================================================
my_favs =[3, 7, 21, 40, 70, 77]   # CONTINUE, BREAK in a Loop
for x in range(10000):
    if x not in my_favs:
        continue                 # just skip to the next interation
    print(f"One of my Favs: {x}")
    if x == 99:
        break     # don't even bother checking for Favorites above 100
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
#      #----------------------------------------------------------------#
#      |      _____                      _    _                         |
#      |     |  ___| _   _  _ __    ___ | |_ (_)  ___   _ __   ___      |
#      |     | |_   | | | || '_ \  / __|| __|| | / _ \ | '_ \ / __|     |
#      |     |  _|  | |_| || | | || (__ | |_ | || (_) || | | |\__ \     |
#      |     |_|     \__,_||_| |_| \___| \__||_| \___/ |_| |_||___/     |
#      |                                                                |
#      #----------------------------------------------------------------#
# ===============================================================================================
for i in range(1,7,1):   #Range Function  (Start, Stop, Step)
    print(i)             # 1  ...
# ===============================================================================================
# ===============================================================================================
names = ['Robert', 'David']            # IN, and NOT IN function
if "John" not in names:
    print("He is not in the List.")
# ===============================================================================================
import time   # Put Time in a Specific Format
print(time.strftime("%H:%H:%H:%M:%a:%p"))
# ===============================================================================================
print(list(range(5, 10, 2)))    # Range Function,  LIST Function
#>>>  [5, 7, 9]
# ===============================================================================================
import time                                     # Put Time in a Specific Format
print(time.strftime("%H:%H:%H:%M:%a:%p"))       #>>> 10:10:10:54:Fri:AM
# ===============================================================================================
cities = ['Appleton', 'Neenah', 'Redmond']    # No Need for Counter i Variable, use ENUMERATE
for i,city in enumerate(cities, start=1):
    print(i,city)                             #>>> 1 Appleton ......  2 Neenah ......
# ===============================================================================================
import random                      # Pick a random item
print(random.choices([1,2,3,4]))   # you can also put in a variable
print(random.choices(range(0,100,5))) # Or Random in a Range
random.shuffle([1,2,3,4,5])        # Shuffles a List
# ===============================================================================================
x = lambda a,b,c: a + b + c       # Making a quick Function on 1 line.
print(x(5,10,100))
# ===============================================================================================
# a function argument can also be a Function
def addthem(x,y):  return str(x) + " + " + str(y) + " = " +str(x+y)
def time_a_function(the_function_name, x, y):   # I'm taking in a function Name!!
    import time
    start_time = time.time()
    what_to_return = the_function_name(x,y)
    print(f"Elapsed Time = {time.time() - start_time}")
    return what_to_return
print(time_a_function(addthem,2,3))   # I'm passing in a function name, not possible in many other languages
# ===============================================================================================
def put_a_line_before(func):       # make a wrapper around a function, to increase functionality
    def wrapper():                 # there is also a way to take any number of parameters with *args, **kwargs
        print("--------------------------------------------")
        func()
    return wrapper

def say_hello(): print("hello")
say_hello = put_a_line_before(say_hello)  # this reassigns the function to another function
say_hello()     # now you'll see a line before this, because it is going to another function
# ===============================================================================================
#Same as above with an easier way of doing it
def put_a_line_before(func):       # make a wrapper around a function, to increase functionality
    def wrapper():                 # there is also a way to take any number of parameters with *args, **kwargs
        print("--------------------------------------------")
        func()
    return wrapper
@put_a_line_before                        # this reassigns say_hello to put_a_line_before
def say_hello(): print("hello")
say_hello()     # now you'll see a line before this, because it is going to another function
# ===============================================================================================
from getpass import getpass          # Working with Passwords, hiding them while you type
password = getpass('Password: ')     # User won't see what they typed
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
#      #----------------------------------------------------------------------#
#      | ___          __                                 _    _               |
#      ||_ _| _ __   / _|  ___   _ __  _ __ ___    __ _ | |_ (_)  ___   _ __  |
#      | | | | '_ \ | |_  / _ \ | '__|| '_ ` _ \  / _` || __|| | / _ \ | '_ \ |
#      | | | | | | ||  _|| (_) || |   | | | | | || (_| || |_ | || (_) || | | ||
#      ||___||_| |_||_|   \___/ |_|   |_| |_| |_| \__,_| \__||_| \___/ |_| |_||
#      |                                                                      |
#      #----------------------------------------------------------------------#
# ===============================================================================================
import sys, os                                            # Useful information
print(f'{sys.platform}, {sys.version}, {os.environ}')     # OS.environ is a lot a data
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================

#                          []================================[]
#                          ||  __  __  ___  ____    ____     ||
#                          || |  \/  |(_ _)/ ___)  / ___)    ||
#                          || | |\/| | | | \___ \ | |        ||
#                          || | |  | | | |  ___) || |___     ||
#                          || |_|  |_|(___)(____/  \____)    ||
#                          ||                                ||
#                          []================================[]
# ===============================================================================================
# ===============================================================================================
name="Robert"              # Cause a Fail/Fault based on some condition
assert len(name) != 0      # basically this will fail the Program, halt, if this assertion is False
# ===============================================================================================
try:
    print(name)
except:
    print("the NAME variable is not declared!")
# ===============================================================================================
try:
    print(int('x'))
except:
    print("Conversion Failed!")
else:
    print("Conversion Successful")
finally:
    print('Done')
# ===============================================================================================
#             []===========================================================[]
#             ||  _   _         ____                  _              _     ||
#             || | | | | _ __  / ___)   ___   _ __  _| |_   ___   __| |    ||
#             || | | | || '_ \ \___ \  / _ \ | '__)(_   _) / _ \ / _` |    ||
#             || | |_| || | | | ___) |( (_) )| |     | |_ (  __/( (_| |    ||
#             ||  \___/ |_| |_|(____/  \___/ |_|      \__) \___) \__,_|    ||
#             ||                                                           ||
#             []===========================================================[]
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
import time
from datetime import datetime
odds = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 54, 55,
        57, 59]
for i in range(5):
    right_this_second = datetime.today().second
    if right_this_second in odds:
        print(right_this_second, ": This Second is odd.")
    else:
        print(right_this_second, ": This Second is even.")
    time.sleep(3)
# ===============================================================================================
nums = [1,2,3]
print(dir(nums))
# >>>>   ['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__',
# >>>>   '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__
# >>>>   setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
# ===============================================================================================
import datetime
print(datetime.date.today())
print(datetime.date.today().day)
print(datetime.date.today().month)
print(datetime.date.today().year)
print(datetime.date.isoformat(datetime.date.today()))
# ===============================================================================================
# ===============================================================================================
# Escaping Code, to prevent illegal scripts
import html
print(html.unescape(html.escape("This HTML fragment contains <script>Script</script> tags.")))
# ===============================================================================================
odds = [1,     # Notice the Line waits until ] is reached
        2,
        3]
print(odds)
# ===============================================================================================

# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
prices = []
words = ['Hello', 'Robert']
myinfo = [1, 'Robert']
all = [prices, words, myinfo]
myDim = [[1, 2, 3], ['a', 'b', 'c'], ["Robert", "David", "Linda"]]
# ===============================================================================================
# ===============================================================================================
found = []
vowels = ["A", "E", "I", "O", "U"]
word = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
for letter in word:
    if letter.upper() in vowels:
        found.append(letter)
print(found)
# ===============================================================================================
# ===============================================================================================
names = []
names.append("Robert")
names.append("Robert")
print(names)
# ===============================================================================================
name = input("What is your name?")
# ===============================================================================================
a = ["a", "b"]
a.remove("b")
# ===============================================================================================
a = ["a", "b", "c", "d", "Z", "!"]
print("Original: ", a)
print("I'm removing: ", a.pop())
print("What's left over is ", a)
print("I'm removing: ", a.pop(4))
print("What's left over is ", a)
# ===============================================================================================
nums = [1]
nums.extend([2, 3, 4])
print(nums)
# ===============================================================================================
nums = [2, 3, 4, 5]
nums.insert(0, 1)
print(nums)
# ===============================================================================================
a = [1, 2, 3]
b = a
a.append(4)
print("B:", b)  # Now B ends with 4 !!!!
b = a.copy()
a.append(5)
print("B:", b)  # now B does not have 5
# ===============================================================================================
a = [1, 2, 3, 20]
a[-1] = 4  # Fixes the 20, makes it a 4
print(a)
# ===============================================================================================
a = "Robert"
print("A:", a, "---------A.List:", list(a))
# ===============================================================================================
name = "RlOiBnEdRaT"
print(name[0:12:2])
print(name[1:10:2])
# ===============================================================================================
x = "Jesus is Lord"
print(x[9:])
print(x[:5])
print(x[::3])
# >>> Lord
# >>> Jesus
# >>> JuiLd
# ===============================================================================================
x = ["C", "A", "T"]
print(x)
print(" ".join(x))
# >>> ['C', 'A', 'T']
# >>> C A T
# ===============================================================================================
x = "Was it a car or a cat I saw?"
print(x[::-1])
# >>> ?was I tac a ro rac a ti saW
# ===============================================================================================

# ===============================================================================================
x = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
print(" ".join(x[0]))
# ===============================================================================================
x = "Jesus"
for a in x:
    print(a)
# ===============================================================================================
x = "Jesus Christ"
b = 0
for a in x:
    b += 1
    print(" " * b, a)
# ===============================================================================================
myDictionary = {"Name": "Robert", "Sex": "Mail", "Interests": "Jesus"}
myDictionary["Age"] = 33
print(myDictionary)
print(myDictionary["Name"])
# ===============================================================================================
found = {"e": 0}
found["e"] += 1
# ===============================================================================================
found = {"a": 0, "e": 0, "i": 0, "o": 0, "u": 0, }
for x in found:
    print(x)  # this will not show the values, just the keys!!!
    print(x, ":", found[x])  # This will show both
# ===============================================================================================
found = {"a": 1, "e": 5, "i": 3, "o": 2, "u": 0, }
for x in found:
    print(x, ":", found[x])
# ===============================================================================================
found = {"Z": 1, "A": 5}
for x in sorted(found):
    print(x, ":", found[x])
# ===============================================================================================
myDictionary = {"A": 1, "B": 10, "C": 100}
for x, y in sorted(myDictionary.items()):
    print(x, ":", y)
# ===============================================================================================
found = {}
vowels = "AEIOU"
get = "This is a very big sentence for you to process."
for letter in get:
    if letter.upper() in vowels:
        if letter.upper() not in found:
            found[letter.upper()] = 0
        found[letter.upper()] += 1
for x, y in sorted(found.items()):
    print(x, ":", y)
# ===============================================================================================
found = {}    # Set a Default Value, so no DOESN'T EXIST error happens
found.setdefault("A", 0)
found["A"] += 1
# ===============================================================================================
v = set("AEIOU");    let = set("RSTLNE")
print(sorted(v.union(let)))      # Find the Union of 2 Sets
# ===============================================================================================
# ===============================================================================================
vowels = "AEIOU"
mySentence = "This is a very big sentence for me to process.".upper()
print(" ".join(sorted(set(vowels).intersection(set(mySentence)))))
# ===============================================================================================
import time  # Speed of Tuple vs List Function

for x in range(1000):
    t1 = time.time()
    for y in range(100000):
        v = ['A', 'E', 'I', 'O', 'U', y]
    t1 = int((time.time() - t1) * 10000)

    t2 = time.time()
    for y in range(100000):
        v2 = ('A', 'E', 'I', 'O', 'U', y)
    t2 = int((time.time() - t2) * 10000)

    print("Ratio of List Speed to Tuple Speed=", t1 / t2)
# ===============================================================================================
# ===============================================================================================
people = {}
people["Robert"] = {"Age": 49,
                    "Height": "6 Foot 2 Inches",
                    "Birthday": "April 23, 1971"}
people["Linda"] = {"Age": 48,
                   "Height": "5 Feet",
                   "Birthday": "Aug 14, 1972"}
print("My wifes age...", people["Linda"]["Age"])
print(people, "\n\n")
import pprint

pprint.pprint(people)


# ===============================================================================================
def add_two(x: int, y: int) -> int:
    ''' Return the Sum in the form of an int'''
    return x + y

add_them(3, 5)
# ===============================================================================================
# ===============================================================================================

# ===============================================================================================
def HowManyVowels(phrase: str, letters: str = "aeiou") -> set:
    ''' I User doesn't supply the Letters, then I'll just use the Vowels'''
    return set(phrase).intersection(set(letters))
print(HowManyVowels(letters='aei', phrase='This is a Big sentence.'))  # I can Set the Argument Order Now.
# ===============================================================================================
import Roberts_Mods

print(Roberts_Mods.HowManyVowels("Robert Brownell", "aeiou"))
from Roberts_Mods import HowManyVowels

print(HowManyVowels("Robert Brownell", "aeiou"))
# ===============================================================================================
from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello() -> str:
    return 'Paise the Lord! Hellelujia.'
app.run()
#now goto :   http://127.0.0.1:5000/   in the browser
# ===============================================================================================
from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello() -> str:
    return 'Paise the Lord! Hellelujia.'

@app.route('/vowels')
def vowels() -> str:
    return " ".join(set("This is very big").intersection(set("aeiou")))
app.run()

#now goto :   http://127.0.0.1:5000/vowels   in the browser
# ===============================================================================================
myFile=open('Junk_Data.txt', 'w')   # current dir, r=reading, w=writing, a=appending, x=newfile
print('Did this get into the file???', file=myFile, end=',')
print('I think so....', file=myFile, end='')
myFile.close()
getMyData=open('Junk_Data.txt')
for line in getMyData:
    print(line)
getMyData.close()
# ===============================================================================================
with open('Junk_Data.txt') as tasks:  #using With, it will automatically Close the file
    for chore in tasks:
        print(chore, end='')
# ===============================================================================================
class CountFromBy:
    def __init__(self,v: int, i: int) -> None:
        self.val = v
        self.incr = i
    def increase(self) -> None:
        self.val += self.incr
a=CountFromBy(100,10)
b=CountFromBy(1,1)
a.increase()
print(a.val)
print(a)
# ===============================================================================================
#PEP 8
a_tango_artist = 'Astor Piazzola'   #variable
PI = 3.14  # Constant, uppercase tells others not to change them
def fav_number():
    return 312.3523
#Class
#class TangoArtist:

# Non Public properties
_internal_counter_=0

#Clash of Names
in_ = "Robert"

# ===============================================================================================
# ===============================================================================================
#Zip Functin for going down lists
x_list = [1,2,3]
y_list = ['a', 'b', 'c']
for x,y in zip(x_list,y_list):   # zip will end at the shortest list, unless otherwise told
    print (x,y)
# ===============================================================================================
# Switch Variables
boss = 'Jennifer'
worker = 'Robert'
print("Boss:"+boss+"    Worker:"+worker)
boss,worker = worker, boss
print("Boss:"+boss+"    Worker:"+worker)
# ===============================================================================================
a,b,c = 1,2,3
# ===============================================================================================
#Check if in Dictionary value exists, and return it
ages = {
    'Robert': 49,
    'David' : 15
    }
age=ages.get('Linda', 'Unknown')
# ===============================================================================================
needle = 's'
haystack = ['a', 'b', 'c']
for letter in haystack:
    if needle == letter:
        print("Found!")
        break
else:   # if no break occured
    print('Not Found')
# ===============================================================================================
with open(junk.txt) as f:
    for line in f:
        print(line)
# ===============================================================================================
# ===============================================================================================
class Person():  # Simple Class
    pass         # Pass means, just finish the class, I'll add stuff later
person=Person()  # Declared Varaible to that Class
person.first = "Robert"     #I'm Giving Values to a Class, outside the Class!!!
# ===============================================================================================
import time, datetime
def what_second_is_it(currentTime = datetime.now()):
    print(currentTime.strftime('%S'))
what_second_is_it()                         # >>> 57
time.sleep(1)
what_second_is_it()   #>>> 57   # why doesn't it increment???  Because currentTime=datetime.now() is only run once on initiation!!!
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
cities = ['Neenah', 'Appleton', 'Redmond', 'Bellevue']
#smallest, _, _, largest = cities         # this is dangerous if there are not exactly 4 items in the List.
#smallest, *rest, largest = cities        # underscore tells python this is not an important or used variable
smallest, *_, largest = cities
print(f"Smallest: {smallest}      Largest: {largest}")
print(f"Smallest: {cities[0]}      Largest: {cities[-1]}")
# ===============================================================================================
# Recursion
def is_it_10(x:int=0)->bool:
    if x > 20:
        print(f"Now {x} is way too big, recursion collapsed.")
        return False
    if x != 10:
        print(f"{x} is not 10! Trying Recursion.")
        if (is_it_10(x+1)):
            print(f"Recursion worked! {x}")
            return True
        else:
            print(f"Recursion Failed! {x}")
    else:
        print(f"{x} is 10! Great Job.")
        return True
is_it_10(0)
# ===============================================================================================
# ===============================================================================================
import mytoolbox
print(hasattr(mytoolbox, 'print_10_lines'))   #>>> False     There is no function that does this
assert hasattr(mytoolbox, 'print_10_lines')    # if this fails, then there is no print_10_lines function in myToolbox
# ===============================================================================================
class Employee:     # Understanding the __ Dunders __

    raise_amout = 1

    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.email = first + last + "@wipro.com"
        self.pay = pay

    def fullname(self):
        return "{} {}".format(self.first, self.last)

    def apply_raise(self):
        self.pay = int(self.pay * self.raise_amout)

    def __repr__(self):
        return f"Employee({self.first}, {self.last}, {str(self.pay)})"

    def __str__(self):
        return "Name: " + self.first +" " + self.last +"    Pay:" + str(self.pay)

    def __add__(self, other):
        if isinstance(other, Employee):
            return "Names: " + self.first +" " + self.last + " and " + other.first + " " + other.last
        return NotImplemented

    def __len__(self):
        return len(self.first)+len(self.last)


emp_1=Employee("Robert", "Brownell", 45)
emp_2=Employee("Linda", "Brownell", 95)
print(emp_1)               # Without the __dunders__ I would not get good results for the common operations.
print(emp_1.__repr__())
print(emp_1 + emp_2)
print(len(emp_1))
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
